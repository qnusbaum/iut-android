= Android
Cycles de vie et notions essentielles
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:theme: volnitsky
:pygments:
<link rel="stylesheet" href="myslidy.css" type="text/css" />

== Les ressources
Tout ce qui n'est pas fichier Java.


== Types de ressources
* animator, anim, color (states), drawable, layout, menu, raw, xml
* drawables
  - .png, .9.png, .jpg, .gif, shapes, bitmaps
* values
  - string, arrays, colors, dimens, styles, bool, id, integer...


== Utilisation des ressources
* Comme on l'a vu on va :
  - pointer sur les attributs du fichier R généré
  - R.type_ressource.nom_ressource
* Depuis un fichier XML, on pointe avec:
  - @type_ressource/nom_ressource


== Internationalisation, responsive
* Tout est basé sur le nommage des répertoires
  - On rajoute -suffixe1-suffixe2
* Des suffixes pour tout ce qui nous importe
  - langue et région : en, fr, en-rUS, fr-rFR, fr-rCA
  - smallestWidth : sw320dp
  - Screen size : small, normal, large, xlarge
  - Screen orientation : port, land
  - Autres : ui mode, density pixels, api version
* Ces suffixes peuvent être combinés


== Rappel
* AndroidManifest
* Activity
* Les Fragments
* Le context
* Services
* ContentProviders
* Broadcast Receivers

== Un environnement contraint
* Votre application a de forts risques d'être interrompue
  - Appels téléphoniques
  - Extinction de l'écran
  - Batterie faible
  - Changement d'orientation
* Son comportement doit se greffer sur des appels systèmes

== Application
* On parle bien là de la classe Application du framework
* Elle est lancée une fois pour toutes pour votre application
* On peut donc y stocker des infos globales
* Juste 3 étapes :
  - onCreate
  - onLowMemory
  - onTerminate

WARNING: Ne stockez pas de données trop volumineuses ou changeantes dedans, ne pointez pas non plus vers d'autres ressources sinon elles ne seront jamais libérées.


== Activity
L'activité a l'un des cycles de vie les plus complexes.

image:images/lifecycle.png[Cycle de vie Activity]


== Workflow de la méthode onCreate
* Restaurer l'état mémorisé
* Définir le contenu de la vue
* Initialiser les éléments graphiques
* Affecter les comportements aux éléments graphiques


== Task backstack
Rien de plus facile, il s'agit d'une simple pile.

== Activity
* Les activités doivent être déclarées dans votre AndroidManifest
  - regardez dans votre application d'exemple
* On les appelle au moyen des Intents :

[source,java]
Intent myIntent = new Intent(CurrentActivity.this, NextActivity.class);
myIntent.putExtra("key", value); //Optional parameters
CurrentActivity.this.startActivity(myIntent);


== Fragment
Et voila le pire de tous.

image:images/fragment_lifecycle.jpg[Cycle de vie Fragment]


== Traitements longs
Parce que des fois ça met plus d'une milli seconde...


== Le thread UI
* ANR
* Le thread UI sert à l'affichage
* Quand on veut des traitements asynchrones on les fait dans un thread à part

WARNING: Vous ne devez JAMAIS appeler de traitements longs dans le thread UI


== Threads
* On peut facilement utiliser les threads Java

[source,java]
Thread thread = new Thread (new Runnable() {
  @Override
  public void run() {
      // C'est ici que se passe le code à exécuter
  }
});
thread.start();

* Par contre, on n'a plus accès facilement au thread UI depuis là
* Si vous utilisez des threads, utilisez de préférence l'ExecutorService :
  - pools de threads
  - pas plus compliqué

== AsyncTask
* C'est ça qu'on trouve dans la documentation en premier
* Combinaison d'une action longue et d'un bout de code à exécuter dans le thread UI

[source,java]
AsyncTask<String, Integer, Bitmap> task =
    new AsyncTask<String, Integer, Bitmap>() {
  @Override
  protected void onPreExecute() {
    /* initialisation */
  }
  @Override
  protected Bitmap doInBackground(String... params) {
      /* Traitement long */
      return null;
  }
  @Override
  protected void onPostExecute(Bitmap result) {
    /* UI Thread */
  }  
  @Override
  protected void onProgressUpdate(Integer progress) {
    /* Update progress */
  }
};
task.execute();

* Petits soucis d'ordonnancement, donc pas préconisé par les experts


== Handler
* Utile pour revenir dans le thread UI
* Nécessite d'être initialisé dans le thread UI

[source,java]
private Handler handler = new Handler();
handler.post(runnable);