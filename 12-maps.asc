= Android
Google Maps
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:theme: volnitsky
:pygments:
<link rel="stylesheet" href="myslidy.css" type="text/css" />

== Google Maps API
* Nécessite que l'appareil soit compatible Play Store
* Il faut installer les Play Services, dans extras :
 - Android Support Repository
 - Android Support Library
 - Google Repository
 - Google Play services
* Dépendance dans le fichier _build.gradle_


== Pour bien démarrer
* Android Studio propose un quick start
 - File -> New Project
 - Choisir Google Maps Activity
* Cela instancie une Activity, un fichier de layout et un fichier de ressources


== Le layout
* Il contient notre fragment dans lequel sera affiché la carte :

[source,xml]
<fragment xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:map="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/map"
    android:name="com.google.android.gms.maps.SupportMapFragment"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context="maps.android.iut.org.mapsdemo.MapsActivity" />

* On note l'utilisation de la classe _SupportMapFragment_


== L'activity

[source,java]
public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {
    private GoogleMap mMap;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps);
        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        // Add a marker in Sydney and move the camera
        LatLng sydney = new LatLng(-34, 151);
        mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));
        mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));
    }
}

== Création de la clé d'API
* Limitée à 10000 appels / jour
* Plusieurs options :
 - Suivez le lien dans le fichier _google_maps_api.xml_
 - Depuis la https://console.developers.google.com[Google Developers Console]
 - En suivant la https://developers.google.com/maps/documentation/android-api/signup[procédure complète]
* Remplacez _YOUR_KEY_HERE_ par la clé obtenue


== D'autres solutions
* OpenStreetMap
 - http://wiki.openstreetmap.org/wiki/Android[de très nombreuses librairies]
 - Utilisé par TripAdvisor, NavFree...
* Des fonctionnalités additionnelles
 - Support des maps offline complètes
 - Attention au guidage et à la fraîcheur des cartes


== Localisation
* Une grande avancée dans l'univers du mobile
* Permet d'avoir des informations contextualisées
* Evite donc des saisies


== Exemples d'usages
* Trouver un magasin proche de là où on se trouve
* Diriger l'utilisateur vers un endroit particulier
* Définir une zone Geofence
* Lancer des actions particulière si l'utilisateur entre ou sort de la zone


== Position (Location)
* Représente une position sur terre
* Dans tous les cas :
 - Latitude, longitude, timestamp
* Optionnellement :
 - précision, altitude, vitesse, orientation


== LocationProvider
* Source de géolocalisation
* Les données peuvent provenir de :
 - Satellites GPS (type GPS)
 - Antennes du réseau GSM (type Network)
 - Points d'accès WiFi (type Network)
* Source passive, en récupérant les données récupérées par les autres applications


== Permissions
* 2 permissions différentes fonction de la granularité voulue :

[source,java]
android.permission.ACCESS_COARSE_LOCATION

[source,java]
android.permission.ACCESS_FINE_LOCATION


== Avantages/inconvénients
* GPS
 - coûteux en batterie, précis, plus lent, extérieur
* Network
 - moins coûteux, moins précis, plus rapide, disponibilité variable
* Passive
 - le moins coûteux, le plus rapide, pas toujours disponible


== LocationManager
* Encore un service système
* On le récupère comme les autres :

[source,java]
getSystemService(Context.LOCATION_SERVICE)


== LocationManager
Il permet de :

* Connaître la dernière position
* S'enregistrer pour être notifié des mises à jour
* Recevoir des Intents quand on entre ou sort d'une une zone géographique


== LocationListener

[source,java]
void onLocationChanged(Location location)

[source,java]
void onProviderDisabled(String provider)

[source,java]
void onProviderEnabled(String provider)

[source,java]
void onStatusChanged(String provider, int status, Bundle extras)


== Obtenir la localisation
* On se met à l'écoute des mises à jour des providers
* On conserve la meilleure estimation
* Quand elle est suffisante pour notre cas, on arrête l'écoute
* On utilise alors cette valeur


== Conseils pour conserver de la batterie
* Toujours vérifier si un ancien enregistrement convient
* Limiter le temps de mesure et demander rarement de nouvelle valeur
* Utiliser juste la précision nécessaire
* Coupez les mises à jour sur le onPause


== Bonus
* Obfuscation
 - ProGuard
* Signature
