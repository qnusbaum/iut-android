= TP3
Liaison de notre interface à de vraies données.
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:theme: volnitsky
:pygments:
<link rel="stylesheet" href="myslidy.css" type="text/css" />


== Une simple maquette
Pour l'instant, notre application n'est qu'une simple maquette, elle n'est reliée à aucune donnée réelle.

On va rectifier ça de ce pas !


== Ajout de Retrofit
* Retrofit est une librairie REST pour Android.
  - Pour publier votre API
  - Pour appeler une autre API
* Pour l'ajouter, on ajoute les dépendances gradle dans le build.gradle du module :

[source,groovy]
compile 'com.squareup.retrofit2:retrofit:2.3.0'
compile 'com.squareup.retrofit2:converter-gson:2.3.0'

* Attention, il vous faudra sûrement mettre à jour la configuration gradle


== Façade
* Regardez brièvement les exemples de Retrofit
* Baladez vous un peu sur l'API Github : http://api.github.com[http://api.github.com]
* Créez votre surcouche pour les données dont on a besoin, on se contente du détail d'un repository et des données utilisateur pour l'instant (un seul appel REST)
* Charger les différents champs avec les valeurs remontées par votre API REST.


== Ajout d'une image depuis une URL
* Lancer l'appel en asynchrone pour récupérer l'image :
  - Pour ce faire, on implémente une AsyncTask
  - Dans doInBackground on récupère l'appel de l'URL où se trouve l'image dans un InputStream
  - On retourne ensuite notre Bitmap créé avec la classe BitmapFactory
* Il ne reste plus qu'à valoriser le contenu de notre image dans la vue.


== Si vous avez du mal
[source,java]
public class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
    ImageView bmImage;
    public DownloadImageTask(ImageView bmImage) {
        this.bmImage = bmImage;
    }
    protected Bitmap doInBackground(String... urls) {
        String urldisplay = urls[0];					
        Bitmap mIcon11 = null;
        try {
            InputStream in = new java.net.URL(urldisplay).openStream();
            mIcon11 = BitmapFactory.decodeStream(in);
        } catch (Exception e) {
            Log.e("Error", e.getMessage());
            e.printStackTrace();
        }
        return mIcon11;
    }
    protected void onPostExecute(Bitmap result) {
        bmImage.setImageBitmap(result);
    }
}

== Petites notes
* On utilise une AsyncTask pour ne surtout pas bloquer le thread UI
* Si on bloquait le thread UI, toute l'application se figerait en attendant le chargement complet de l'image.
* Pensez à rajouter la permission d'accès à internet pour appeler une URL.

[source,xml]
<uses-permission android:name="android.permission.INTERNET" />

== Remarque...
* Personne n'a détecté quelque chose qui n'allait pas sur l'appel à l'API Github par Retrofit ?
  - Quid des problèmes de réseau ?
  - Quid si Github met du temps à répondre ?
  - Quid s'il ne répond pas ?
