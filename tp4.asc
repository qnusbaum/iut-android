= Android
Gestion de la liste
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:theme: volnitsky
:pygments:
<link rel="stylesheet" href="myslidy.css" type="text/css" />


== Layout
* Créez un visuel correspondant au suivant pour chacun des éléments de la liste

image:images/list_detail.jpg[Détail d'un élément de la liste]

* Le chiffre représentera le nombre de forks qui ont été effectués sur le repo.

== Récupération distante
* On implémente ensuite une méthode pour récupérer la liste des repository d'un utilisateur.
* Je vous donne la méthode à rajouter dans GitHubService :

[source,java]
@GET("/users/{owner}/repos")
Call<List<Repo>> getReposFromUser(@Path("owner") String owner);

* Il est nécessaire de rajouter le fork_count dans la classe Repo
* On ajoute la liste des résultats pour un user donné à la vue

== ArrayAdapter
* On va implémenter naïvement notre ArrayAdapter
	- Surcharger la méthode _getCount_
	- Surcharger la méthode _getItem_
	- Surcharger la méthode _getItemId_
	- Surcharger la méthode _getView_, utilisez l'inflater si la convertView n'est pas définie sinon, utilisez directement la convertView.


== Pattern Viewholder
* La création de chacun des éléments de la liste est assez longue
* On souhaite éviter d'appeler 3 fois _findViewById_ par élément
* Utilisez le pattern Viewholder qui vous a été présenté


== Lien
* Faire le lien avec la vue détail fonction du repo sélectionné
* Passer le nom du repo en paramètre de l'Intent

== Pour les rapides
Rajoutez un champ de recherche de user et rafraîchissez la liste une fois un nouveau user rentré.

== Et après
* Vous n'avez pas remarqué le même code utilisé à plusieurs endroits ?
* Comment faire pour le factoriser ?
* Quel élément reste accessible de partout dans votre application ?