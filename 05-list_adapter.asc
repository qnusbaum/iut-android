= Android
Listes et Adapters
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:theme: volnitsky
:pygments:
<link rel="stylesheet" href="myslidy.css" type="text/css" />

== Les Listes
Utilisation des ListView et ExpendableListView.


== La problématique
* On souhaite afficher une liste d'éléments
* On veut pouvoir agir sur ces éléments
* On veut de bonnes performances et un encombrement mémoire faible
* On veut pouvoir modifier la liste des éléments à la volée

== Scrolling
* La méthode de parcours préférée sur le mobile est le vertical
* Pour afficher un ensemble d'éléments on utilise :
  - Le scrolling
  - La ScrollView quand les vues sont connues
  - La ListView quand les éléments sont dynamiques


== Fonctionnement
* La ListView connait :
  - le nombre de vues qu'elle doit gérer
  - le nombre de vues qu'elle peut afficher en même temps
* Le probléme :
  - Comment gérer l'écart entre les deux nombres ?
* La solution :
  - gérer une liste de vues "en attente"


== ScrapView
image:images/scrapView.jpg[ScrapView]


== Pattern ViewHolder
* Permet d'éviter d'appeler plusieurs fois findViewById
* On commence par définir un ViewHolderItem, avec les champs correspondants aux éléments d'interface auxquels on voudra accéder :

[source,java]
static class ViewHolderItem {
    TextView textViewItem;
    TextView textViewItem2;
}


== Pattern ViewHolder
* Dans la méthode getView, on se sert alors de ce ViewHolder :
  - On ne fait les findViewById qu'une fois
  - On n'a plus qu'à valoriser nos éléments
* On utilise les méthodes _getTag_ et _setTag_ pour mémoriser et récupérer notre ViewHolder


== Pattern ViewHolder
[source,java]
public View getView(int position, View convertView, ViewGroup parent) {
    ViewHolderItem viewHolder;
    if (convertView == null){
        LayoutInflater inflater = ((Activity) context).getLayoutInflater();
        convertView = inflater.inflate(R.layout.item, parent, false);
        viewHolder = new ViewHolderItem();
        viewHolder.textViewItem = (TextView) convertView.findViewById(R.id.textViewItem);
        viewHolder.textViewItem2 = (TextView) convertView.findViewById(R.id.textViewItem2);
        convertView.setTag(viewHolder);
    } else {
        viewHolder = (ViewHolderItem) convertView.getTag();
    }
    Item item = getItem(position);
    if (item != null) {
        viewHolder.textViewItem.setText(item.text);
        viewHolder.textViewItem2.setText(item.text2);
    }
    return convertView;
}
