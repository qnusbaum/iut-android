= Android
Les Animations
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:theme: volnitsky
:pygments:
<link rel="stylesheet" href="myslidy.css" type="text/css" />

== Quel type d'animations
* Des animations de propriétés des vues
* Comme toujours :
 - En Java
 - En XML

== ViewPropertyAnimator
* On récupère un ViewPropertyAnimator en appelant

[source,java]
view.animate()

* On modifie ensuite les propriétés :
 - alpha, rotation, scale, translation, position...
* On peut ensuite préciser un interpolator :
 - permet de rendre le mouvement moins brut


== Démo CrossFade
* Voir dans le projet Google AnimationsDemo
 - CrossFadeActivity


== ViewPager
* Transitions entre pages
* Dans la support library
* Utilise des fragments
* Swipes par défaut


== Utilisation
* On instancie le layout contenant notre ViewPager
* On définit son PagerAdapter qui définit :
 - Le nombre de pages à afficher
 - La méthode getItem qui retourne le fragment correspondant à l'index en paramètre


== Démo ViewPager
* Voir dans le projet Google AnimationsDemo
 - ScreenSlideActivity


== CardFlipActivity
* Voir dans le projet Coogle AnimationsDemo
 - CardFlip
* Fichiers :
 - src/CardFlipActivity.java
 - animator/card_flip_right_in.xml
 - animator/card_flip_right_out.xml
 - animator/card_flip_left_in.xml
 - animator/card_flip_left_out.xml
 - layout/fragment_card_back.xml
 - layout/fragment_card_front.xml


== ZoomView
* Voir dans le projet Coogle AnimationsDemo
 - ZoomActivity


== Animation d'images
* On créée une ressource xml :

[source,java]
<animation-list android:id="@+id/selected" android:oneshot="false">
	<item android:drawable="@drawable/img1" android:duration="50" />
	<item android:drawable="@drawable/img2" android:duration="30" />
	<item android:drawable="@drawable/img3" android:duration="50" />
	<item android:drawable="@drawable/img4" android:duration="40" />
</animation-list>

* On la lance :

[source,java]
ImageView img = (ImageView)findViewById(R.id.spinning_wheel_image);
img.setBackgroundResource(R.drawable.spin_animation);
// On récupère le fond, qui a été compilé en objet AnimationDrawable
AnimationDrawable frameAnimation = (AnimationDrawable) img.getBackground();
// On démarre l'animation (en boucle par défaut)
frameAnimation.start();