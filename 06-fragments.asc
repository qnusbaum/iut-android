= Android
La gestion des fragments
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:theme: volnitsky
:pygments:
<link rel="stylesheet" href="myslidy.css" type="text/css" />

== Pourquoi utiliser des fragments ?
* Sur de plus grands écrans, pour utiliser la place disponible
* Pour avoir une interface composable


== Support libraries
* Les fragments n'ont été ajoutés qu'à partir d'Honeycomb (API 11)
* Les librairies de support comblent ce manque dans les versions inférieures (jusqu'à API 7)

[source,groovy]
dependencies {
    ...
    compile "com.android.support:support-v4:18.0.+"
}

* Ou encore (avec ressources)

[source,groovy]
dependencies {
    ...
    compile "com.android.support:appcompat-v7:18.0.+"
}


== Creation d'un fragment

[source,java]
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.ViewGroup;
public class DetailFragment extends Fragment {
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
        Bundle savedInstanceState) {
        return inflater.inflate(R.layout.detail, container, false);
    }
}

== Ajouter un fragment à un layout

[source,xml]
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="horizontal"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent">
    <fragment android:name="com.example.ListFragment"
              android:id="@+id/listFragment"
              android:layout_weight="1"
              android:layout_width="0dp"
              android:layout_height="match_parent" />
    <fragment android:name="com.example.DetailFragment"
              android:id="@+id/detailFragment"
              android:layout_weight="2"
              android:layout_width="0dp"
              android:layout_height="match_parent" />
</LinearLayout>


== Ajouter un fragment à un layout

* Avec la librairie de compatibilité, il faut utiliser une FragmentActivity
* Avec appcompat, on utilise AppCompatActivity pour aussi avoir les barres de menu
* Avec une API >= 11, une simple Activity suffit

== UI responsive

image:images/fragments.png[Fragments]


== Placeholders

* Pour placer les fragments au runtime
 - On est obligé d'utiliser des FrameLayouts (vides)
 - On utilise systématiquement une FragmentTransaction
* La transaction est constituée
 - d'un ouverture avec begin
 - d'un ou plusieurs ajouts ou remplacements de fragments
 - d'un commit


== Pour gérer différemment le cas un ou deux blocs

* Le cas deux blocs :
 - Le second placeholder est dans le layout, donc on ajoute le fragment dedans
 - On le remplace ou le met à jour quand on sélectionne un élément de la liste
* Le cas un seul bloc :
 - Le second fragment n'étant pas présent on n'affiche rien
 - Sur clic, on lance une Activity de détail


== Et le code ?

[source,java]
if (findViewById(R.id.second_fragment) != null) {
    DetailFragment detailFragment = new DetailFragment();    
    getSupportFragmentManager()
    	.beginTransaction()
	    .add(R.id.second_fragment, detailFragment)
	    .commit();
}